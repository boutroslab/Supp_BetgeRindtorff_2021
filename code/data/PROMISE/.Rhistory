library(scales)
discrete_scale(
aesthetics = c("fill"), scale_name = "theme_vignette",
palette = manual_pal(values = unname(colorScale)), ...)
}
# Flag whether images should be saved additionally as PDF files
save_images = FALSE
img_output_dir = "images"
if(save_images) if(!dir.exists(img_output_dir)) dir.create(img_output_dir)
roc_aucs
roc_data
roc_aucs
roc_data
library(pheatmap)
library(ggplot2)
library(reshape2)
library(knitr)
library(igraph)
library(qgraph)
library(Matrix)
library(tidyverse)
library(Rtsne)
library(SCOPEAnalysis)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
# Load data
data("drug_effects", package = "SCOPEAnalysis")
data("organoid_viability", package = "SCOPEAnalysis")
# Lines
lines = get_lines()
colorScale = setNames(
object = c("#e6194b", "#3cb44b", "#ffe119", "#0082c8", "#f58231",
"#911eb4", "#46f0f0", "#f032e6", "#d2f53c", "#fabebe",
"#008080", "#e6beff", "#aa6e28", "#fffac8", "#800000"),
nm = lines)
# Define a base theme for the plots
# Modified from https://rpubs.com/Koundy/71792
theme_vignette <- function(base_size=14, base_family="Helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "right",
legend.direction = "vertical",
legend.key.size= unit(0.5, "cm"),
legend.spacing = unit(1, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")))
}
theme_vignette_color <- function(...){
library(scales)
discrete_scale(
aesthetics = c("colour", "color"), scale_name = "theme_vignette",
palette = manual_pal(values = unname(colorScale)), ...)
}
theme_vignette_fill <- function(...){
library(scales)
discrete_scale(
aesthetics = c("fill"), scale_name = "theme_vignette",
palette = manual_pal(values = unname(colorScale)), ...)
}
# Flag whether images should be saved additionally as PDF files
save_images = TRUE
img_out_dir = "images"
if(save_images) if(!dir.exists(img_out_dir)) dir.create(img_out_dir)
# This function gets angles between row vectors
get_angles = function(row_vectors) {
norm_vectors = t(apply(
row_vectors, 1, function(x) x / sqrt(sum(x**2, na.rm = TRUE))))
dotprod = norm_vectors %*% t(norm_vectors)
diag(dotprod) = 1
# return(acos(dotprod) * 180/pi)
return(dotprod)
}
# The minimum cluster size for enriched clusters. Clusters smaller than this
# are removed independently of p-value adjustment, i.e. in a statistically
# sound way.
min_cluster_size = 3
# The number of PCA components.
n_components = 25
# Compute the median viability for each drug
# Set concentration to -1 for all wells without concentration data to avoid
# incorrect aggregation as 'aggregate(...)' cannot deal with NA entries
mortality$Concentration[is.na(mortality$Concentration)] = -1
mortality$Concentration[mortality$Product.Name == "Staurosporine_500nM"] = -1
mortality$Concentration[mortality$Product.Name == "DMSO"] = -1
viability = aggregate(
x = mortality$Percent.Live,
by = list(mortality$Product.Name, mortality$Concentration, mortality$Line),
median)
# Set concentration back to NA
viability$Group.2[viability$Group.2 == -1] = NA
colnames(viability) = c("Drug", "Concentration", "Line", "Viability")
# Keep only drugs with both viability and drug-induced phenotype data
# (NA-merging works...)
tmp = cbind(drug_effect_profiles, drug_effect_metadata)
tmp$RowNames = rownames(tmp)
tmp = merge(tmp, viability,
by = c("Drug", "Concentration", "Line"))
drug_effect_profiles = tmp[, paste0("PC", 1:25)]
rownames(drug_effect_profiles) = tmp$RowNames
drug_effect_metadata = tmp[, c(
"Drug", "Concentration", "Line", "AUC_Mean",
"AUC_Std", "Distance", "Viability")]
rownames(drug_effect_metadata) = tmp$RowNames
line = "D055T01"
outdir = "/Users/jansauer/tmp/organoid_imgs"
organoid_dir = file.path("/Users/jansauer/Thesis/Projects/PROMISE/FeatureAnalysis/typical_organoids", line)
data("organoid_viability", package = "SCOPEAnalysis")
# Load images
imgs = list()
imgs_md = c()
targets = "pi3k"
target = targets[1]
drugs = drug_annotations[grepl(
targets, drug_annotations$Targets, ignore.case = TRUE), "Drug"]
drugs
mydrugs = c("Tyrphostin AG 879", "K02288", "PF-573228", "WIKI4", "AT7867", "WYE-354")
mydrugs %in% drugs
drug_annotations
drug_annotations[drug_annotations$Drug == mydrugs[1]]
drug_annotations[drug_annotations$Drug == mydrugs[1], ]
drug_annotations[drug_annotations$Drug == mydrugs[2], ]
drug_annotations[drug_annotations$Drug == mydrugs[3], ]
drug_annotations[drug_annotations$Drug == mydrugs[4], ]
drug_annotations[drug_annotations$Drug == mydrugs[5], ]
drug_annotations[drug_annotations$Drug == mydrugs[6], ]
source('~/Thesis/Projects/PROMISE/FeatureAnalysis/r_functions/CreateOrganoidPreview.R')
target
drugs
fns
# This script generates example images for all enriched targets of a line
library(EBImage)
line = "D004T01"
outdir = "/Users/jansauer/tmp/organoid_imgs"
organoid_dir = file.path("/Users/jansauer/Thesis/Projects/PROMISE/FeatureAnalysis/typical_organoids", line)
data("organoid_viability", package = "SCOPEAnalysis")
# Load images
imgs = list()
imgs_md = c()
targets = "notarget"
for(target in targets) {
# drugs = drug_annotations[grepl(
#   targets, drug_annotations$Targets, ignore.case = TRUE), "Drug"]
drugs = c("Tyrphostin AG 879", "K02288", "PF-573228", "WIKI4", "AT7867", "WYE-354")
for(drug in drugs) {
fns = list.files(file.path(organoid_dir, drug), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0(target, "__", drug, "__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
}
}
# Load DMSO
fns = list.files(file.path(organoid_dir, "DMSO"), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0("DMSO__DMSO__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
targets = c(targets, "DMSO")
targets
# Get max size and create a blank bgbox. This box has a 1px white
# boundary for easier separation
max_imgs_dims = max(sapply(imgs, nrow))
bgbox = array(data = 0, dim = c(max_imgs_dims, max_imgs_dims, 3))
bgbox[1, 1:max_imgs_dims, 1:3] = 1
bgbox[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
bgbox[1:max_imgs_dims, 1, 1:3] = 1
bgbox[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
# Embed images
embedded_imgs = list()
for(ii in seq_along(imgs)) {
img = imgs[[ii]]
imgname = names(imgs)[[ii]]
new_img = bgbox
dimdiff = dim(new_img) - dim(img)
if(all(dimdiff == 0)) {
new_img = img
# Add the white boundary
new_img[1, 1:max_imgs_dims, 1:3] = 1
new_img[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
new_img[1:max_imgs_dims, 1, 1:3] = 1
new_img[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
} else {
new_img[
(dimdiff[1]/2):((dimdiff[1]/2) + dim(img)[1] - 1),
(dimdiff[2]/2):((dimdiff[2]/2) + dim(img)[2] - 1),
1:3] = img
}
embedded_imgs[[imgname]] = new_img
}
# Create one file for each target, with one drug per row
for(target in targets) {
target_imgs = embedded_imgs[
sapply(strsplit(names(embedded_imgs), "__"), "[[", 1) == target]
img_row = list()
drugs = unique(sapply(strsplit(names(target_imgs), "__"), "[[", 2))
for(drug in drugs) {
img_row[[length(img_row) + 1]] = EBImage::abind(
target_imgs[
sapply(strsplit(names(target_imgs), "__"), "[[", 2) == drug],
along = 1)
}
img_row = EBImage::Image(
EBImage::abind(img_row, along = 2),
colormode = "color")
target_outdir = file.path(outdir, line)
if(!dir.exists(target_outdir)) dir.create(target_outdir)
EBImage::writeImage(img_row, file.path(target_outdir, paste0(target, ".tif")))
write.table(
x = drugs, file = file.path(target_outdir, paste0(target, ".txt")),
row.names = FALSE, col.names = FALSE, quote = FALSE)
}
target
target_imgs
target_imgs = embedded_imgs[
sapply(strsplit(names(embedded_imgs), "__"), "[[", 1) == target]
target_imgs
names(embedded_imgs)
# This script generates example images for all enriched targets of a line
library(EBImage)
line = "D004T01"
outdir = "/Users/jansauer/tmp/organoid_imgs"
organoid_dir = file.path("/Users/jansauer/Thesis/Projects/PROMISE/FeatureAnalysis/typical_organoids", line)
data("organoid_viability", package = "SCOPEAnalysis")
# Load images
imgs = list()
imgs_md = c()
targets = "notarget"
for(target in targets) {
# drugs = drug_annotations[grepl(
#   targets, drug_annotations$Targets, ignore.case = TRUE), "Drug"]
drugs = c("Tyrphostin AG 879", "K02288", "PF-573228", "WIKI4", "AT7867", "WYE-354")
for(drug in drugs) {
fns = list.files(file.path(organoid_dir, drug), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0(target, "__", drug, "__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
}
}
imgs
fns
drug
organoid_dir
line = "D004T01"
outdir = "/Users/jansauer/tmp/organoid_imgs"
# organoid_dir = file.path("/Users/jansauer/Thesis/Projects/PROMISE/FeatureAnalysis/typical_organoids", line)
organoid_dir = file.path("/collab-ag-fischer/typical_organoids", line)
data("organoid_viability", package = "SCOPEAnalysis")
# Load images
imgs = list()
imgs_md = c()
targets = "notarget"
for(target in targets) {
# drugs = drug_annotations[grepl(
#   targets, drug_annotations$Targets, ignore.case = TRUE), "Drug"]
drugs = c("Tyrphostin AG 879", "K02288", "PF-573228", "WIKI4", "AT7867", "WYE-354")
for(drug in drugs) {
fns = list.files(file.path(organoid_dir, drug), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0(target, "__", drug, "__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
}
}
imgs
# Load DMSO
fns = list.files(file.path(organoid_dir, "DMSO"), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0("DMSO__DMSO__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
targets = c(targets, "DMSO")
# Get max size and create a blank bgbox. This box has a 1px white
# boundary for easier separation
max_imgs_dims = max(sapply(imgs, nrow))
bgbox = array(data = 0, dim = c(max_imgs_dims, max_imgs_dims, 3))
bgbox[1, 1:max_imgs_dims, 1:3] = 1
bgbox[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
bgbox[1:max_imgs_dims, 1, 1:3] = 1
bgbox[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
# Embed images
embedded_imgs = list()
for(ii in seq_along(imgs)) {
img = imgs[[ii]]
imgname = names(imgs)[[ii]]
new_img = bgbox
dimdiff = dim(new_img) - dim(img)
if(all(dimdiff == 0)) {
new_img = img
# Add the white boundary
new_img[1, 1:max_imgs_dims, 1:3] = 1
new_img[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
new_img[1:max_imgs_dims, 1, 1:3] = 1
new_img[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
} else {
new_img[
(dimdiff[1]/2):((dimdiff[1]/2) + dim(img)[1] - 1),
(dimdiff[2]/2):((dimdiff[2]/2) + dim(img)[2] - 1),
1:3] = img
}
embedded_imgs[[imgname]] = new_img
}
# Create one file for each target, with one drug per row
for(target in targets) {
target_imgs = embedded_imgs[
sapply(strsplit(names(embedded_imgs), "__"), "[[", 1) == target]
img_row = list()
drugs = unique(sapply(strsplit(names(target_imgs), "__"), "[[", 2))
for(drug in drugs) {
img_row[[length(img_row) + 1]] = EBImage::abind(
target_imgs[
sapply(strsplit(names(target_imgs), "__"), "[[", 2) == drug],
along = 1)
}
img_row = EBImage::Image(
EBImage::abind(img_row, along = 2),
colormode = "color")
target_outdir = file.path(outdir, line)
if(!dir.exists(target_outdir)) dir.create(target_outdir)
EBImage::writeImage(img_row, file.path(target_outdir, paste0(target, ".tif")))
write.table(
x = drugs, file = file.path(target_outdir, paste0(target, ".txt")),
row.names = FALSE, col.names = FALSE, quote = FALSE)
}
library(SCOPEAnalysis)
line = get_lines()
line
source('~/Thesis/Projects/PROMISE/FeatureAnalysis/r_functions/CreateOrganoidPreview.R')
line = "D055T01"
print(line)
outdir = "/Users/jansauer/tmp/organoid_imgs_pi3k"
# organoid_dir = file.path("/Users/jansauer/Thesis/Projects/PROMISE/FeatureAnalysis/typical_organoids", line)
organoid_dir = file.path("/collab-ag-fischer/typical_organoids", line)
data("organoid_viability", package = "SCOPEAnalysis")
# Load images
imgs = list()
imgs_md = c()
targets = "notarget"
for(target in targets) {
# drugs = drug_annotations[grepl(
#   targets, drug_annotations$Targets, ignore.case = TRUE), "Drug"]
drugs = c("Tyrphostin AG 879", "K02288", "PF-573228", "WIKI4", "AT7867", "WYE-354")
for(drug in drugs) {
fns = list.files(file.path(organoid_dir, drug), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0(target, "__", drug, "__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
}
}
# Load DMSO
fns = list.files(file.path(organoid_dir, "DMSO"), full.names = TRUE)
fn_counter = 1
for(fn in fns) {
newname = paste0("DMSO__DMSO__", fn_counter)
imgs[[newname]] = readImage(fn)
imgs_md = c(imgs_md, paste0(target, "__", drug))
fn_counter = fn_counter + 1
}
targets = c(targets, "DMSO")
# Get max size and create a blank bgbox. This box has a 1px white
# boundary for easier separation
max_imgs_dims = max(sapply(imgs, nrow))
bgbox = array(data = 0, dim = c(max_imgs_dims, max_imgs_dims, 3))
bgbox[1, 1:max_imgs_dims, 1:3] = 1
bgbox[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
bgbox[1:max_imgs_dims, 1, 1:3] = 1
bgbox[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
# Embed images
embedded_imgs = list()
for(ii in seq_along(imgs)) {
img = imgs[[ii]]
imgname = names(imgs)[[ii]]
new_img = bgbox
dimdiff = dim(new_img) - dim(img)
if(all(dimdiff == 0)) {
new_img = img
# Add the white boundary
new_img[1, 1:max_imgs_dims, 1:3] = 1
new_img[max_imgs_dims, 1:max_imgs_dims, 1:3] = 1
new_img[1:max_imgs_dims, 1, 1:3] = 1
new_img[1:max_imgs_dims, max_imgs_dims, 1:3] = 1
} else {
new_img[
(dimdiff[1]/2):((dimdiff[1]/2) + dim(img)[1] - 1),
(dimdiff[2]/2):((dimdiff[2]/2) + dim(img)[2] - 1),
1:3] = img
}
embedded_imgs[[imgname]] = new_img
}
# Create one file for each target, with one drug per row
for(target in targets) {
target_imgs = embedded_imgs[
sapply(strsplit(names(embedded_imgs), "__"), "[[", 1) == target]
img_row = list()
drugs = unique(sapply(strsplit(names(target_imgs), "__"), "[[", 2))
for(drug in drugs) {
img_row[[length(img_row) + 1]] = EBImage::abind(
target_imgs[
sapply(strsplit(names(target_imgs), "__"), "[[", 2) == drug],
along = 1)
}
img_row = EBImage::Image(
EBImage::abind(img_row, along = 2),
colormode = "color")
target_outdir = file.path(outdir, line)
if(!dir.exists(target_outdir)) dir.create(target_outdir)
EBImage::writeImage(img_row, file.path(target_outdir, paste0(target, ".tif")))
write.table(
x = drugs, file = file.path(target_outdir, paste0(target, ".txt")),
row.names = FALSE, col.names = FALSE, quote = FALSE)
}
library(SCOPEMouse)
acc_matrix
??acc_matrix
getwd()
configdir = "/collab-ag-fischer/PROMISE/data-10x-4t-c-16z/configdir"
platename = "D004T01P003L02"
featuresHdf5Filename
libary(PROMISE)
library(PROMISE)
featuresHdf5Filename
featuresdir
source(file.path(configdir, "watchdogConfig.R"))
featuresdir
row = "A"; col = "01"
feature_fn = featuresHdf5Filename(
filedir = file.path(featuresdir), platename = platename,
row = row, col = col, configdir = configdir)
feature_fn
feature_fn = featuresHdf5Filename(
filedir = file.path(featuresdir, platename), platename = platename,
row = row, col = col, configdir = configdir)
tmp = loadFeaturesForWell(platename = "D055T01P008L03", row = "A", col = "01", configdir = configdir)
row
col
platename = "D055T01P008L03"
source(file.path(configdir, "watchdogConfig.R"))
# The feature file could be in the main folder or in the 'wells' subfolder
# if it's already been compressed
feature_fn = featuresHdf5Filename(
filedir = file.path(featuresdir, platename), platename = platename,
row = row, col = col)
feature_fn
!file.exists(feature_fn)
if(!file.exists(feature_fn)) {
feature_fn = featuresHdf5Filename(
filedir = file.path(featuresdir, platename, "wells"),
platename = platename, row = row, col = col)
}
file.exists(feature_fn)
library(rhdf5)
h5ls(feature_fn)
class(h5ls(feature_fn))
h5ls(feature_fn)$name
"features" %in% h5ls(feature_fn)$name
fo_key = ifelse(
test = "features" %in% h5ls(feature_fn)$name,
yes = "features", no = "features_organoids")
fon_key = ifelse(
test = "feature_names" %in% h5ls(feature_fn)$name,
yes = "feature_names", no = "feature_names_organoids")
features_organoids = data.frame(h5read(file = feature_fn, name = fo_key))
colnames(features_organoids) = h5read(file = feature_fn, name = fon_key)
dim(features_organoids)
head(features_organoids)
features_organoids[1:5, 1:5]
getwd()
setwd("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
roxygen2::roxygenise()
roxygen2::roxygenise()
