theme(strip.background = element_blank(), strip.text = element_blank()) +
ggtitle(
label = "Accuracies of Classifiers",
subtitle = "Classifiers were Trained on a Subset of Image Channels")
ggplot_df = acc
ggplot_df$Type = c(
"acc_full" = "All",
"acc_Actin" = "Actin",
"acc_DAPI" = "DAPI",
"acc_FITC" = "FITC",
"acc_ActinDAPI" = "Actin & DAPI")[ggplot_df$Type]
ggplot_df$Type = factor(x = ggplot_df$Type, levels = c("All", "Actin", "DAPI", "FITC", "Actin & DAPI"))
ggplot(data = ggplot_df, mapping = aes(x = Type, y = Accuracy, fill = Type)) +
geom_boxplot(position = position_dodge(), width = 0.5) +
geom_point(position = position_jitterdodge(jitter.width = 0.5)) +
theme_vignette() + scale_fill_manual(
labels = c("All Channels", "Actin", "DAPI", "Dead Cells", "Actin + DAPI"),
values = c("#800000", "#e6194b", "#0082c8", "#3cb44b", "#911eb4"))
ctg_input_data = readRDS("CTG_with_AUC.rds")
img_auc = readRDS("ImageViability_with_AUC_allChannels.rds")
ctg_viability = aggregate(
x = ctg_input_data$viability,
by = list("id" = paste0(
ctg_input_data$Line, "_",
ctg_input_data$library, "_",
ctg_input_data$well)),
FUN = mean)
img_id = paste0(
img_auc$Line, "_",
substr(img_auc$Plate.ID, 12, 14), "_",
img_auc$Well.ID)
img_viability = aggregate(
x = img_auc$Percent.Live,
by = list("id" = img_id),
FUN = mean)
mortality_dict = aggregate(img_auc, list("id" = img_id), first)
viability = merge(img_viability, ctg_viability, by = "id")
colnames(viability) = c("id", "img_viability", "ctg_viability")
viability = merge(viability, mortality_dict, by = "id")
correlation = sapply(sort(unique(viability$Line)), function(x) {
corr = cor.test(
viability[viability$Line == x, "img_viability"],
viability[viability$Line == x, "ctg_viability"])
unname(corr$estimate)
})
full_correlation = cor.test(
viability$img_viability,
viability$ctg_viability)$estimate
ggplotdf = viability
ggplotdf$LineLabel = sprintf(
"%s; r = %.2f", substr(ggplotdf$Line, 1, 4),
correlation[ggplotdf$Line])
ggplot(data = ggplotdf, mapping = aes(x = img_viability, y = ctg_viability)) +
geom_point(alpha = 0.1) + stat_function(fun = function(x) x, size = 1, color = "red") +
theme_vignette() + scale_colour_vignette() +
# facet_wrap(facets = ~ LineLabel) +
xlab("Image Viability") + ylab("CTG Viability") +
# scale_x_continuous(breaks = c(0.25, 0.75, 1.0)) +
# scale_y_continuous(breaks = c(0.25, 0.75, 1.0)) +
theme(legend.title = element_blank()) + xlim(c(0, 1)) + ylim(c(0, 1)) +
ggtitle(label = "Correlation of Image Viability vs. CTG",
subtitle = sprintf("Full Channel Classifier; Correlation = %.4f", full_correlation))
cor_df = data.frame(correlation) %>%
rownames_to_column("Line") %>%
add_column("Loc" = correlation - 0.04) %>%
mutate(Label = round(correlation, 2))
ggplot(data = cor_df, mapping = aes(x = Line, y = correlation)) + geom_col() +
theme_vignette() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("") + ylab("") +
ggtitle(label = "Correlation of Image Viability vs. CTG",
subtitle = sprintf("Full Channel Classifier; Correlation = %.4f", full_correlation)) +
geom_text(aes(x = Line, y = Loc, label = Label), color = "White")
auc_type = "s_AUC_fit"
ctg_auc = aggregate(
x = ctg_input_data[[auc_type]],
by = list(
"Line" = ctg_input_data$Line,
"Drug" = ctg_input_data$drug),
FUN = mean)
ctg_auc$id = paste0(ctg_auc$Line, "__", ctg_auc$Drug)
img_auc_cor = aggregate(
x = img_auc[[auc_type]],
by = list(
"Line" = img_auc$Line,
"Drug" = img_auc$Product.Name),
FUN = mean)
img_auc_cor$id = paste0(img_auc_cor$Line, "__", img_auc_cor$Drug)
mortality_dict = aggregate(
x = img_auc,
by = list(
img_auc$Line,
img_auc$Product.Name),
FUN = first)
mortality_dict$id = paste0(
mortality_dict$Group.1, "__",
mortality_dict$Group.2)
auc = merge(
x = img_auc_cor %>% select(-Line, -Drug),
y = ctg_auc %>% select(-Line, -Drug),
by = "id")
colnames(auc) = c("id", "Image.AUC", "CTG.AUC")
auc = merge(
x = auc,
y = mortality_dict %>% select(Line, Product.Name, id),
by = "id")
correlation = sapply(sort(unique(auc$Line)), function(x) {
corr = cor.test(
auc[auc$Line == x, "Image.AUC"],
auc[auc$Line == x, "CTG.AUC"])
unname(corr$estimate)
})
full_correlation = cor.test(
auc$Image.AUC,
auc$CTG.AUC)$estimate
ggplotdf = auc
ggplotdf$LineLabel = sprintf(
"%s; r = %.2f", substr(ggplotdf$Line, 1, 4),
correlation[ggplotdf$Line])
ggplot(data = ggplotdf, mapping = aes(x = Image.AUC, y = CTG.AUC)) +
geom_point(alpha = 0.1) +
stat_function(fun = function(x) x, size = 1, color = "red") +
theme_vignette() + scale_colour_vignette() +
# facet_wrap(facets = ~ LineLabel) +
xlab("Image Viability") + ylab("CTG Viability") +
# scale_x_continuous(breaks = c(0.25, 0.75, 1.0)) +
# scale_y_continuous(breaks = c(0.25, 0.75, 1.0)) +
theme(legend.title = element_blank()) + xlim(c(0, 1)) + ylim(c(0, 1)) +
ggtitle(
label = "AUC Correlation of Image Viability vs. CTG",
subtitle = sprintf("Full Channel Classifier; Correlation = %.4f",
full_correlation)) +
coord_equal()
cor_df = data.frame(correlation) %>%
rownames_to_column("Line") %>%
add_column("Loc" = correlation - 0.04) %>%
mutate(Label = round(correlation, 2))
ggplot(data = cor_df, mapping = aes(x = Line, y = correlation)) + geom_col() +
theme_vignette() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("") + ylab("") +
ggtitle(label = "AUC Correlation of Image Viability vs. CTG",
subtitle = sprintf("Full Channel Classifier; Correlation = %.4f", full_correlation)) +
geom_text(aes(x = Line, y = Loc, label = Label), color = "White")
tmp = viability[!is.na(viability$ctg_viability), ]
tmp$Line = factor(tmp$Line)
outliers_1 = tmp[tmp$img_viability <= 0.25 & tmp$ctg_viability >= 0.75, ]
outliers_1_matrix = as.matrix(table(
as.character(outliers_1$Product.Name),
outliers_1$Line))
outliers_1_matrix = outliers_1_matrix[
order(rowSums(outliers_1_matrix), decreasing = TRUE), ]
outliers_1_matrix = outliers_1_matrix[
, order(colSums(outliers_1_matrix), decreasing = TRUE)]
outliers_1_matrix = cbind(
outliers_1_matrix, "TOTAL" = rowSums(outliers_1_matrix))
outliers_1_matrix = rbind(
outliers_1_matrix, "TOTAL" = colSums(outliers_1_matrix))
outliers_2 = tmp[tmp$img_viability >= 0.75 & tmp$ctg_viability <= 0.25, ]
outliers_2_matrix = as.matrix(table(
as.character(outliers_2$Product.Name),
outliers_2$Line))
outliers_2_matrix = outliers_2_matrix[
order(rowSums(outliers_2_matrix), decreasing = TRUE), ]
outliers_2_matrix = outliers_2_matrix[
, order(colSums(outliers_2_matrix), decreasing = TRUE)]
outliers_2_matrix = cbind(
outliers_2_matrix, "TOTAL" = rowSums(outliers_2_matrix))
outliers_2_matrix = rbind(
outliers_2_matrix, "TOTAL" = colSums(outliers_2_matrix))
library(ggplot2)
library(tidyverse)
library(knitr)
library(kableExtra)
library(reshape2)
library(pheatmap)
options(knitr.table.format = "html")
# The names of the cell lines and a custom color scale to keep cell line colors
# consistent throughout the vignette
lines = c(
"D004T01", "D007T01", "D010T01", "D013T01", "D018T01",
"D019T01", "D020T01", "D020T02", "D021T01", "D022T01",
"D027T01", "D030T01", "D046T01", "D054T01", "D055T01")
colorScale = setNames(
object = c("#e6194b", "#3cb44b", "#ffe119", "#0082c8", "#f58231",
"#911eb4", "#46f0f0", "#f032e6", "#d2f53c", "#fabebe",
"#008080", "#e6beff", "#aa6e28", "#fffac8", "#800000"),
nm = lines)
# Define a base theme for the vignette plots
# Modified from https://rpubs.com/Koundy/71792
theme_vignette <- function(base_size=14, base_family="Helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "right",
legend.direction = "vertical",
legend.key.size= unit(0.5, "cm"),
legend.spacing = unit(1, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")))
}
scale_fill_vignette <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_vignette <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
source("functions.R")
library(PharmacoGx)
# Load mortality data
mortality = load_classification_results()
source('~/.active-rstudio-document')
y
tr
diff(by(y, tr, mean))
by(y, tr, mean)
tr
y
aggregate(y, list(tr), mean)
by(y, tr, mean)
source('~/.active-rstudio-document')
s
tr
by(y, s, mean)
diff(by(y, s, mean))
source('~/.active-rstudio-document')
dist
hist(dist, xlim = c(-3, 3), col = "black", breaks = 100)
abline(v = diff(by(y, tr, mean)), col = "blue", lwd = 2)
set.seed(101)
num_data = 20
rep(c("DMSO", "Drug"), num_data)
rep(c("DMSO", "Drug"), each = num_data)
x = matrix(runif(n = num_data*2), ncol = 2, nrow = num_data)
y = rep(c("DMSO", "Drug"), each = num_data)
num_data = 30
x = matrix(rnorm(n = num_data*2), ncol = 2, nrow = num_data)
y = rep(c("DMSO", "Drug"), each = num_data)
x[y == "Drug", ] = x[y == "Drug", ] + 0.2
x[y == "Drug", ]
dim(x)
length(y)
y = rep(c("DMSO", "Drug"), each = num_data/2)
x[y == "Drug", ] = x[y == "Drug", ] + 0.2
df = data.frame(
"Label" = y,
"X" = x)
df
num_data = 30
x = matrix(
rnorm(n = num_data*2), ncol = 2, nrow = num_data,
dimnames = list(NULL, c("X", "Y")))
y = rep(c("DMSO", "Drug"), each = num_data/2)
x[y == "Drug", ] = x[y == "Drug", ] + 0.2
df = data.frame(
"Label" = y,
x)
df
ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label))
library(ggplot2)
ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label))
source('~/.active-rstudio-document')
ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
my_theme <- function(base_size=14, base_family="Helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "right",
legend.direction = "vertical",
legend.key.size= unit(0.5, "cm"),
legend.spacing = unit(1, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label))) +
my_theme()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(ksvm)
library(kernlab)
source('~/.active-rstudio-document')
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label), size = 4) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462")))
svm = ksvm(x = Label ~ X + Y, data = df, kernel = "vanilladot")
svm
svm@alphaindex
alphaindex(svm)
x[alphaindex(svm)[[1]], ]
svm
svm = ksvm(x = Label ~ X + Y, data = df, kernel = "vanilladot", C = 0.01)
svm
svm@coef
svm@scaling
svm@param
svm@b
svm@alpha
svm@fitted
svm@nSV
svm@SVindex
svm@alphaindex
svm@n.action()
svm@n.action
svm@terms
model = glm(formula = Label ~ ., data = df, family = "binomial")
num_data = 100
x = matrix(
rnorm(n = num_data*2, sd = 0.2), ncol = 2, nrow = num_data,
dimnames = list(NULL, c("X", "Y")))
y = rep(c(0, 1), each = num_data/2)
x[y == "Drug", ] = x[y == "Drug", ] + 0.7
df = data.frame("Label" = y, x)
df
model = glm(formula = Label ~ ., data = df, family = "binomial")
model
abline(model)
model$coefficients
model$coefficients
abline(model$coefficients)
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label), size = 4) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462")))
df$Label = as.factor(df$Label)
model = glm(formula = Label ~ ., data = df, family = "binomial")
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label), size = 4) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462")))
df
source('~/.active-rstudio-document')
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = Label), size = 4) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462")))
df
df$Label
head(df)
plot(ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y), size = 4) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462")))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
model
model = glm(formula = LabelName ~ X + Y, data = df, family = "binomial")
model = glm(formula = Label ~ X + Y, data = df, family = "binomial")
model = glm(formula = Label ~ X + Y, data = df, family = "binomial")
source('~/.active-rstudio-document')
model
df
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
model = glm(formula = Label ~ X + Y, data = df, family = "gaussian")
model
model = glm(formula = Label ~ X + Y, data = df, family = "binomial")
model
model = glm(formula = Label ~ X + Y - 1, data = df, family = "binomial")
model
model = glm(formula = Label ~ X + Y, data = df, family = "binomial")
model
model = glm(formula = Label ~ X + Y - 0, data = df, family = "binomial")
model = glm(formula = Label ~ X + Y + 0, data = df, family = "binomial")
model
model = glm(formula = Label ~ X + Y, data = df, family = "binomial")
model
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
model
coefs = model$coefficients
coefs
model$coefficients["X"]
model$coefficients["X"] / model$coefficients["Y"]
ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = LabelName), size = 4) +
geom_abline(mapping = aes(
slope = -model$coefficients["X"] / model$coefficients["Y"],
intercept = -model$coefficients["(Intercept)"] / model$coefficients["Y"]))
model = ksvm(x = Label ~ X + Y, data = df, C = 0.01, prob.model = TRUE)
model
model@coef
library(glmnet)
source("http://www.bioconductor.org/biocLite.R")
biocLite("glmnet")
library(glmnet)
model = glmnet(x = df[,c("X","Y")], y = df$LabelName, family = "binomial")
model = glmnet(x = x, y = df$LabelName, family = "binomial")
model
model$a0
model$df
model$lambda
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(data = df) +
geom_point(mapping = aes(x = X, y = Y, color = LabelName), size = 4) +
geom_abline(mapping = aes(
slope = -model$coefficients["X"] / model$coefficients["Y"],
intercept = -model$coefficients["(Intercept)"] / model$coefficients["Y"])) +
my_theme() + scale_color_manual(values = c(
"DMSO" = "#386cb0", "Drug" = "#fdb462"))
library(elasticnet)
biocLite("elasticnet")
library(svm)
biocLite(svm)
biocLite("svm")
biocLite("e1071")
library(e1071)
num_data = 100
x = matrix(
rnorm(n = num_data*2, sd = 0.2), ncol = 2, nrow = num_data,
dimnames = list(NULL, c("X", "Y")))
y = rep(c(0, 1), each = num_data/2)
x[y == 1, ] = x[y == 1, ] + 0.7
df = data.frame("Label" = y, x)
df$LabelName = ifelse(df$Label == 0, "DMSO", "Drug")
model = svm(formula = Label ~ X + Y, data = df)
model
model = svm(formula = Label ~ X + Y, data = df, kernel = "linear")
model
model$coef0
model$nu
model$kernel
model$coefs
browseVignettes("MaxContrastProjection")
setwd("~/Thesis/Projects/PROMISE/FeatureAnalysis/drug_effects/human/D004T01")
list.files()
pvals = read.csv("SVM_Accuracies_PCA_D004T01_25components_pvalues.csv")
head(pvals)
pvals = read.csv(
file = "SVM_Accuracies_PCA_D004T01_25components_pvalues.csv",
header = TRUE, row.names = 1)
head(pvals)
pvals$PAdj = p.adjust(pvals$PValue, method = "BH")
pvals$PAdj
hist(pvals$PAdj)
hist(pvals$PValue)
hist(pvals$PAdj)
sum(pvals$PAdj <= 0.1)
mean(pvals$PAdj <= 0.1)
plot(pvals$Distance, pvals$PAdj)
source('~/.active-rstudio-document')
dat
dat = dat[dat$PAdj <= 0.1, ]
dim(dat)
head(dat)
range(dat$AUC_Mean)
plot(dat$Distance, dat$PAdj)
plot(dat$AUC_Mean, dat$PAdj)
plot(dat$PAdj, dat$AUC_Mean)
